datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?   
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  points        Int       @default(0)
  enabled       Boolean   @default(true)
  competing     Boolean   @default(true)    
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model categories {
  id                 Int      @id @default(autoincrement())
  added              DateTime
  added_by           String
  title              String   @db.VarChar(255)
  description        String   @db.Text
  exposed            Boolean  @default(true)
}

model challenges {
  id                            Int      @id @default(autoincrement())
  added                         DateTime
  added_by                      String
  title                         String   @db.VarChar(255)
  category                      Int      @db.UnsignedSmallInt
  description                   String   @db.Text
  exposed                       Boolean  @default(true)
  available_from                DateTime 
  available_until               DateTime
  flag                          String   @db.Text
  case_insensitive              Boolean  @default(false)
  automark                      Boolean  @default(true)
  points                        Int      
  solves                        Int      @db.UnsignedInt @default(0)
  num_attempts_allowed          Int      @db.UnsignedTinyInt @default(0)
  min_seconds_btwn_submissions  Int      @db.UnsignedSmallInt @default(5)
  relies_on                     Int      @db.UnsignedInt
}

model hints {
  id                 Int      @id @default(autoincrement())
  challenge          Int      @db.UnsignedInt
  added              DateTime
  added_by           String
  visible            Boolean  @default(false)
  body               String   @db.Text
}

model announcements {
  id                 Int      @id @default(autoincrement())
  added              DateTime
  added_by           String
  title              String   @db.VarChar(255)
  body               String   @db.Text
}

model email_whitelist {
  id                 Int       @id @default(autoincrement())
  email              String    @unique
}

model submissions {
  id                            Int      @id @default(autoincrement())
  added                         DateTime
  challenge                     Int      @db.UnsignedInt
  user_id                       Int      @db.UnsignedInt
  flag                          String   @db.Text
  correct                       Boolean  @default(false)
  marked                        Boolean  @default(false)
}
